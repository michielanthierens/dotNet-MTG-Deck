@using Howest.MagicCards.DAL.Models
@inject IHttpClientFactory httpClientFactory
@rendermode InteractiveServer


<div>
    <h2>deck</h2>

    <p class="error">@message</p>
    <div class="deck">

        @if (deckCards != null && deckCards.Any())
        {
            <div id="listOfDeckCards">
                @foreach (DeckCard card in deckCards)
                {
                    <div class="deckCardInstance">
                        <button @onclick="()=>removeCardFromDeck(card)"> - </button>
                        <div @onclick="()=>AddCardToDeck(card)" class="deckName">@card.name</div>
                        <div class="deckAmount">@card.amount</div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>no cards in your deck yet...</p>
        }
    </div>
    <button @onclick="@ClearDeck" class="clearDeck">Clear deck</button>
</div>

@code {
    string message { get; set; }
    public IEnumerable<DeckCard> deckCards { get; set; }
    private JsonSerializerOptions JsonOptions { get; }

    public DeckCards()
    {
        JsonOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
            };
    }

    protected override async Task OnInitializedAsync()
    {
        await getDeck();
    }

    public async Task getDeck()
    {
        HttpClient httpClient = httpClientFactory.CreateClient("MinimalAPI");

        HttpResponseMessage response = await httpClient.GetAsync("");

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            deckCards = JsonSerializer.Deserialize<IEnumerable<DeckCard>>(apiResponse, JsonOptions);
        }
        else
        {
            message = $"Error: {response.ReasonPhrase}";
        }
    }

    async Task removeCardFromDeck(DeckCard card)
    {
        HttpClient httpClient = httpClientFactory.CreateClient("MinimalAPI");
        var content = new StringContent(string.Empty);

        HttpResponseMessage response = await httpClient.PutAsync($"remove?id={card.id}&name={card.name}", content);

        if (response.IsSuccessStatusCode)
        {
            await getDeck();
        }
        else
        {
            message = $"Error: {response.ReasonPhrase}";
        }
    }

    public async Task AddCardToDeckFromAllCards(CardReadDTO card)
    {
        HttpClient httpClient = httpClientFactory.CreateClient("MinimalAPI");
        var content = new StringContent(string.Empty);

        HttpResponseMessage response = await httpClient.PutAsync($"add?id={card.MtgId}&name={card.Name}", content);

        if (response.IsSuccessStatusCode)
        {
            await getDeck();
        }
        else
        {
            message = $"Error: {response.ReasonPhrase}";
        }
    }

    public async Task AddCardToDeck(DeckCard card)
    {
        HttpClient httpClient = httpClientFactory.CreateClient("MinimalAPI");
        var content = new StringContent(string.Empty);

        HttpResponseMessage response = await httpClient.PutAsync($"add?id={card.id}_{card.name}&name={card.name}", content);

        if (response.IsSuccessStatusCode)
        {
            await getDeck();
        }
        else
        {
            message = $"Error: {response.ReasonPhrase}";
        }
    }

    private async Task ClearDeck()
    {
        HttpClient httpClient = httpClientFactory.CreateClient("MinimalAPI");
        var content = new StringContent(string.Empty);

        HttpResponseMessage response = await httpClient.DeleteAsync($"clear");

        if (response.IsSuccessStatusCode)
        {
            await getDeck();
        }
        else
        {
            message = $"Error: {response.ReasonPhrase}";
        }
    }
}