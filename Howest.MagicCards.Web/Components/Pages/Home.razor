@page "/"
@inject IHttpClientFactory httpClientFactory
@rendermode InteractiveServer

<PageTitle>MTG Deck Builder</PageTitle>

<h1>MTG Deck Builder</h1>

<div id="body">
    <div id="allCards">
        <FilteredCards GetDeck="@GetDeck"/>
    </div>
    <div id="deckCards">
        <DeckCards deckCards="@DeckCards" message="@_message"/>
    </div>
</div>


@code {
    private IEnumerable<DeckReadDTO> DeckCards { get; set; }
    private JsonSerializerOptions JsonOptions { get; }
    private string _message;

    public Home() {
        JsonOptions = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await GetDeck();
    }

    private async Task GetDeck()
    {
        HttpClient httpClient = httpClientFactory.CreateClient("MinimalAPI");

        HttpResponseMessage response = await httpClient.GetAsync("");

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            Response<IEnumerable<DeckReadDTO>> apiResponseObj = JsonSerializer.Deserialize<Response<IEnumerable<DeckReadDTO>>>(apiResponse, JsonOptions);
            if (apiResponseObj is { Succeeded: true })
            {
                DeckCards = apiResponseObj.Data ?? new List<DeckReadDTO>();
                _message = apiResponseObj.Message;
            }
            else
            {
                _message = apiResponseObj?.Message;
            }
        }
        else
        {
            _message = $"Error: {response.ReasonPhrase}";
        }
    }
}