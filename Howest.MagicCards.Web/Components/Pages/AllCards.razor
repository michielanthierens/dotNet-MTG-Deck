@inject IHttpClientFactory httpClientFactory
@rendermode InteractiveServer

<div class="filter">
    <EditForm Model="@blazorFilter" OnValidSubmit="@LoadFilteredCards"  FormName="CardFilter" class="form">
        <div class="form-group">
            <label for="Name">Name: </label>
            <InputText id="Name" @bind-Value="@blazorFilter.Name" class="form-control" DisplayName="Name:"/> 
        </div>
        <div class="form-group">
            <label for="Set">Set:</label>
            <InputText id="Set" @bind-Value="@blazorFilter.Set" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="ArtistName">Artist:</label>
            <InputText id="ArtistName" @bind-Value="@blazorFilter.ArtistName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="RarityCode">Rarity:</label>
            <InputSelect id="RarityCode" @bind-Value="@blazorFilter.RarityCode" class="form-control">
                @if (rarities != null && rarities.Any())
                {
                    <option value="">all</option>
                    @foreach (RarityDTO rarity in rarities)
                    {
                        <option value="@rarity.RarityCode">@rarity.Rarity</option>
                    }
                }
                else
                {
                    <option disabled>Loading rarities...</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="Type">Type:</label>
            <InputText id="Type" @bind-Value="@blazorFilter.Type" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="Text">Text:</label>
            <InputText id="Text" @bind-Value="@blazorFilter.Text" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="Sort">Sorting order:</label>
            <InputSelect id="Sort" @bind-Value="@blazorFilter.Sort" class="form-control">
                <option value="asc">Ascending</option>
                <option value="desc">Descending</option>
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="PageSize">Number of results:</label>
            <InputNumber id="PageSize" @bind-Value="@blazorFilter.PageSize" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label for="PageNumber">Page:</label>
            <InputNumber id="PageNumber" @bind-Value="@blazorFilter.PageNumber" class="form-control"></InputNumber>
        </div>

        <button type="submit">Search</button>
        <p class="error">@message</p>
    </EditForm>
</div>
<div class="allCards">
    @if (filteredCards == null)
    {
        <p><em>Loading</em></p>
        <p>@message</p>
    }
    else
    {
        <FilteredCardsList Cards="@filteredCards" GetDeck="GetDeck"></FilteredCardsList>
    }
</div>

@code {
    BlazorFilter blazorFilter = new();

    [Parameter]
    public EventCallback GetDeck { get; set; }

    private IEnumerable<RarityDTO> rarities { get; set; } = new List<RarityDTO>();
    private IEnumerable<CardReadDTO> filteredCards { get; set; }
    private string message { get; set; }
    private JsonSerializerOptions JsonOptions { get; }

    public AllCards()
    {
        JsonOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
            };
    }

    protected override async Task OnInitializedAsync()
    {
        getRarities();

        await LoadFilteredCards();        
    }

    private async Task LoadFilteredCards()
    {
        HttpClient httpClient = httpClientFactory.CreateClient("WebAPI");
        httpClient.DefaultRequestHeaders.Add("api-version", "1.5");

        Dictionary<string, string> queryParams = new ();

        if (!string.IsNullOrEmpty(blazorFilter.Name))
            queryParams.Add("Name", blazorFilter.Name);
        if (!string.IsNullOrEmpty(blazorFilter.Set))
            queryParams.Add("Set", blazorFilter.Set);
        if (!string.IsNullOrEmpty(blazorFilter.ArtistName))
            queryParams.Add("ArtistName", blazorFilter.ArtistName);
        if (!string.IsNullOrEmpty(blazorFilter.RarityCode))
            queryParams.Add("RarityCode", blazorFilter.RarityCode);
        if (!string.IsNullOrEmpty(blazorFilter.Type))
            queryParams.Add("Type", blazorFilter.Type);
        if (!string.IsNullOrEmpty(blazorFilter.Text))
            queryParams.Add("Text", blazorFilter.Text);
        if (blazorFilter.PageNumber > 0)
            queryParams.Add("PageNumber", blazorFilter.PageNumber.ToString());
        if (blazorFilter.PageSize > 0)
            queryParams.Add("PageSize", blazorFilter.PageSize.ToString());
        if (!string.IsNullOrEmpty(blazorFilter.Sort))
            queryParams.Add("Sort", blazorFilter.Sort);
        if (string.IsNullOrEmpty(blazorFilter.Sort))
            queryParams.Add("Sort", "asc");

        string url = QueryHelpers.AddQueryString("Cards", queryParams);

        HttpResponseMessage response = await httpClient.GetAsync(url);

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            PagedResponse<IEnumerable<CardReadDTO>> result = JsonSerializer.Deserialize<PagedResponse<IEnumerable<CardReadDTO>>>(apiResponse, JsonOptions);
            filteredCards = result.Data;
        }
        else
        {
            filteredCards = new List<CardReadDTO>();
            message = $"Error: {response.ReasonPhrase}";
        }
    }

    private async void getRarities()
    {
        HttpClient httpClient = httpClientFactory.CreateClient("WebAPI");
        httpClient.DefaultRequestHeaders.Add("api-version", "1.5");

        HttpResponseMessage response = await httpClient.GetAsync("Cards/rarities");

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            rarities = JsonSerializer.Deserialize<IEnumerable<RarityDTO>>(apiResponse, JsonOptions);
        }
        else
        {
            rarities = new List<RarityDTO>();
            message = $"Error: {response.ReasonPhrase}";
        }
    }
}
