@inject IHttpClientFactory httpClientFactory

<div class="form">
    <EditForm Model="@Filter" OnValidSubmit="LoadFilteredCards"  FormName="CardFilter">
        <div class="form-group">
            <label for="Name">Name:</label>
            <InputText @bind-Value="Filter.Name" id="Name" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="SetId">SetId:</label>
            <InputText id="SetId" @bind-Value="Filter.SetId" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="ArtistName">Artist:</label>
            <InputText id="ArtistName" @bind-Value="Filter.ArtistName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="RarityCode">Rarity:</label>
            <InputSelect id="RarityCode" @bind-Value="Filter.RarityCode" class="form-control">
                @if (rarities != null && rarities.Any())
                {
                    // <option value="@null"> - choose rarity - </option>
                    @foreach (RarityDTO rarity in rarities)
                    {
                        <option value="@rarity.RarityCode">@rarity.Rarity</option>
                    }
                }
                else
                {
                    <option disabled>Loading rarities...</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="Type">Type:</label>
            <InputText id="Type" @bind-Value="Filter.Type" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="Text">Text:</label>
            <InputText id="Text" @bind-Value="Filter.Text" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="Sort">Sorting order:</label>
            <InputSelect id="Sort" @bind-Value="Filter.Sort" class="form-control">
                <option value="asc">Ascending</option>
                <option value="desc">Descending</option>
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="PageSize">Number of results:</label>
            <InputNumber id="PageSize" @bind-Value="Filter.PageSize" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label for="PageNumber">Page:</label>
            <InputNumber id="PageNumber" @bind-Value="Filter.PageNumber" class="form-control"></InputNumber>
        </div>

        <button type="submit">Search</button>
        <p class="error">@message</p>
    </EditForm>
</div>
<div class="allCards">
    @if (filteredCards == null)
    {
        <p><em>Loading</em></p>
        <p>@message</p>
    }
    else
    {
        <FilteredCardsList Cards="@filteredCards"></FilteredCardsList>
    }
</div>

@code {
    private CardFilter Filter { get; set; } = new CardFilter();
    private IEnumerable<RarityDTO> rarities { get; set; } = new List<RarityDTO>();
    private IEnumerable<CardReadDTO> filteredCards { get; set; }
    private string message { get; set; }
    private JsonSerializerOptions JsonOptions { get; }

    public AllCards()
    {
        JsonOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
            };
    }

    protected override async Task OnInitializedAsync()
    {
        getRarities();
        await LoadFilteredCards();
    }

    private async Task LoadFilteredCards()
    {
        HttpClient httpClient = httpClientFactory.CreateClient("WebAPI");
        httpClient.DefaultRequestHeaders.Add("api-version", "1.5");

        var queryParams = new Dictionary<string, string>();

        if (!string.IsNullOrEmpty(Filter.Name))
            queryParams.Add("Name", Filter.Name);
        if (!string.IsNullOrEmpty(Filter.SetId))
            queryParams.Add("SetId", Filter.SetId);
        if (!string.IsNullOrEmpty(Filter.ArtistName))
            queryParams.Add("ArtistName", Filter.ArtistName);
        if (!string.IsNullOrEmpty(Filter.RarityCode))
            queryParams.Add("RarityCode", Filter.RarityCode);
        if (!string.IsNullOrEmpty(Filter.Type))
            queryParams.Add("Type", Filter.Type);
        if (!string.IsNullOrEmpty(Filter.Text))
            queryParams.Add("Text", Filter.Text);
        if (Filter.PageNumber > 0)
            queryParams.Add("PageNumber", Filter.PageNumber.ToString());
        if (Filter.PageSize > 0)
            queryParams.Add("PageSize", Filter.PageSize.ToString());
        if (!string.IsNullOrEmpty(Filter.Sort))
            queryParams.Add("Sort", Filter.Sort);

        string url = QueryHelpers.AddQueryString("Cards", queryParams);

        HttpResponseMessage response = await httpClient.GetAsync(url);

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            PagedResponse<IEnumerable<CardReadDTO>> result = JsonSerializer.Deserialize<PagedResponse<IEnumerable<CardReadDTO>>>(apiResponse, JsonOptions);
            filteredCards = result.Data;
        }
        else
        {
            filteredCards = new List<CardReadDTO>();
            message = $"Error: {response.ReasonPhrase}";
        }
    }

    private async void getRarities()
    {
        HttpClient httpClient = httpClientFactory.CreateClient("WebAPI");
        httpClient.DefaultRequestHeaders.Add("api-version", "1.5");

        HttpResponseMessage response = await httpClient.GetAsync("Cards/rarities");

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            rarities = JsonSerializer.Deserialize<IEnumerable<RarityDTO>>(apiResponse, JsonOptions);
        }
        else
        {
            rarities = new List<RarityDTO>();
            message = $"Error: {response.ReasonPhrase}";
        }
    }
}
